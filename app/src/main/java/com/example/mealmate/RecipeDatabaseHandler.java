package com.example.mealmate;

import android.content.Context;
import android.widget.Toast;

import com.example.mealmate.model.Recipe;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.ListenerRegistration;

import java.util.ArrayList;
import java.util.Map;

public class RecipeDatabaseHandler {

    private FirebaseFirestore db;
    private CollectionReference recipesRef;
    private Context context;

    public RecipeDatabaseHandler(Context context) {
        this.context = context;
        db = FirebaseFirestore.getInstance();
        recipesRef = db.collection("recipes");
    }

    // Add a new recipe
    public void addRecipeWithId(Recipe recipe) {
        recipesRef.add(recipe).addOnSuccessListener(documentReference -> {
            String documentId = documentReference.getId(); // Autogenerated document ID
            recipe.setRecipeId(documentId); // Store the ID in the Recipe object

            // Update the Recipe object in Firestore to include the document ID
            recipesRef.document(documentId).update("recipeId", documentId)
                    .addOnSuccessListener(aVoid -> Toast.makeText(context, "Recipe added successfully!", Toast.LENGTH_SHORT).show())
                    .addOnFailureListener(e -> Toast.makeText(context, "Error adding recipe: " + e.getMessage(), Toast.LENGTH_SHORT).show());
        }).addOnFailureListener(e -> {
            Toast.makeText(context, "Error adding recipe: " + e.getMessage(), Toast.LENGTH_SHORT).show();
        });
    }

    // Update a recipe
    public void updateRecipeById(Recipe recipe) {
        if (recipe.getRecipeId() != null) {
            recipesRef.document(recipe.getRecipeId())
                    .set(recipe) // Overwrites the entire document
                    .addOnSuccessListener(aVoid -> Toast.makeText(context, "Recipe updated successfully!", Toast.LENGTH_SHORT).show())
                    .addOnFailureListener(e -> Toast.makeText(context, "Error updating recipe: " + e.getMessage(), Toast.LENGTH_SHORT).show());
        } else {
            Toast.makeText(context, "Recipe ID is null. Cannot update.", Toast.LENGTH_SHORT).show();
        }
    }


    // Get a single recipe by ID
    public void getRecipe(String recipeId) {
        recipesRef.document(recipeId).get().addOnCompleteListener(task -> {
            if (task.isSuccessful() && task.getResult() != null) {
                Recipe recipe = task.getResult().toObject(Recipe.class);
                if (recipe != null) {
                    recipe.setRecipeId(task.getResult().getId());
                    Toast.makeText(context, "Recipe retrieved: " + recipe.getName(), Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(context, "Recipe not found.", Toast.LENGTH_SHORT).show();
                }
            } else {
                Toast.makeText(context, "Error retrieving recipe: " + task.getException(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    // Get real-time updates for all recipes
    public ListenerRegistration getAllRecipes(RecipeUpdateListener listener) {
        return recipesRef.addSnapshotListener((value, error) -> {
            if (error != null) {
                listener.onError(error);
                return;
            }

            if (value != null) {
                ArrayList<Recipe> recipes = new ArrayList<>();
                for (DocumentSnapshot doc : value.getDocuments()) {
                    Recipe recipe = doc.toObject(Recipe.class);
                    if (recipe != null) {
                        recipe.setRecipeId(doc.getId()); // Set document ID as recipe ID
                        recipes.add(recipe);
                    }
                }
                listener.onRecipesUpdated(recipes);
            }
        });
    }

    // Delete a recipe
    public void deleteRecipe(String recipeId) {
        recipesRef.document(recipeId).delete().addOnCompleteListener(task -> {
            if (task.isSuccessful()) {
                Toast.makeText(context, "Recipe deleted successfully!", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(context, "Error deleting recipe: " + task.getException(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    // Custom listener for real-time updates
    public interface RecipeUpdateListener {
        void onRecipesUpdated(ArrayList<Recipe> recipes);
        void onError(Exception e);
    }

}
