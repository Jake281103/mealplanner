package com.example.mealmate;

import android.content.Context;
import android.util.Log;
import android.widget.Toast;

import com.example.mealmate.model.MealPlan;
import com.example.mealmate.model.Recipe;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.EventListener;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.firebase.firestore.ListenerRegistration;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class RecipeDatabaseHandler {

    private FirebaseFirestore db;
    private CollectionReference recipesRef;
    private Context context;

    public RecipeDatabaseHandler(Context context) {
        this.context = context;
        db = FirebaseFirestore.getInstance();
        recipesRef = db.collection("recipes");
    }

    // Add a new recipe
    public void addRecipeWithId(Recipe recipe) {
        recipesRef.add(recipe).addOnSuccessListener(documentReference -> {
            String documentId = documentReference.getId(); // Autogenerated document ID
            recipe.setRecipeId(documentId); // Store the ID in the Recipe object

            // Update the Recipe object in Firestore to include the document ID
            recipesRef.document(documentId).update("recipeId", documentId)
                    .addOnSuccessListener(aVoid -> Toast.makeText(context, "Recipe added successfully!", Toast.LENGTH_SHORT).show())
                    .addOnFailureListener(e -> Toast.makeText(context, "Error adding recipe: " + e.getMessage(), Toast.LENGTH_SHORT).show());
        }).addOnFailureListener(e -> {
            Toast.makeText(context, "Error adding recipe: " + e.getMessage(), Toast.LENGTH_SHORT).show();
        });
    }

    // Add a recipe under userRecipes collection with userId and recipe fields
    public void addUserRecipe(Recipe recipe) {
        FirebaseAuth auth = FirebaseAuth.getInstance();
        String userId = auth.getCurrentUser() != null ? auth.getCurrentUser().getUid() : null;

        if (userId == null) {
            Toast.makeText(context, "You must be logged in to add a recipe.", Toast.LENGTH_SHORT).show();
            return;
        }

        // Prepare the data to store
        Map<String, Object> data = new HashMap<>();
        data.put("userId", userId);
        data.put("recipe", recipe);

        // Store the recipe under userRecipes collection
        db.collection("userRecipes").add(data)
                .addOnSuccessListener(documentReference -> {
                    // Get the autogenerated document ID
                    String documentId = documentReference.getId();

                    // Update the recipe with the document ID
                    recipe.setRecipeId(documentId);

                    // Update Firestore to include the recipeId in the recipe field
                    db.collection("userRecipes").document(documentId)
                            .update("recipe.recipeId", documentId)
                            .addOnSuccessListener(aVoid -> Toast.makeText(context, "Recipe added successfully!", Toast.LENGTH_SHORT).show())
                            .addOnFailureListener(e -> Toast.makeText(context, "Error updating recipe ID: " + e.getMessage(), Toast.LENGTH_SHORT).show());
                })
                .addOnFailureListener(e -> Toast.makeText(context, "Error adding recipe: " + e.getMessage(), Toast.LENGTH_SHORT).show());
    }

    // Add a recipe under userRecipes collection with userId and recipe fields
    public void addMealPlan(MealPlan mealplan) {
        FirebaseAuth auth = FirebaseAuth.getInstance();
        String userId = auth.getCurrentUser() != null ? auth.getCurrentUser().getUid() : null;

        if (userId == null) {
            Toast.makeText(context, "You must be logged in to add a meal plan.", Toast.LENGTH_LONG).show();
            return;
        }

        // Check if a meal plan for the same user, date, and recipe already exists
        db.collection("mealPlans")
                .whereEqualTo("userId", userId)
                .whereEqualTo("mealPlan.date", mealplan.getDate())  // Check for the same date
                .whereEqualTo("mealPlan.recipe.name", mealplan.getRecipe().getName())  // Check for the same recipe
                .get()
                .addOnSuccessListener(queryDocumentSnapshots -> {
                    if (!queryDocumentSnapshots.isEmpty()) {
                        // Meal plan already exists, show a message
                        Toast.makeText(context, "Meal plan for this recipe already exists on " + mealplan.getDate(), Toast.LENGTH_LONG).show();
                    } else {
                        // No duplicate found, proceed with adding the meal plan
                        saveMealPlanToFirestore(mealplan, userId);
                    }
                })
                .addOnFailureListener(e -> Toast.makeText(context, "Error checking meal plan: " + e.getMessage(), Toast.LENGTH_LONG).show());

    }

    // Method to save meal plan if it doesn't exist
    private void saveMealPlanToFirestore(MealPlan mealplan, String userId) {
        // Prepare the data to store
        Map<String, Object> data = new HashMap<>();
        data.put("userId", userId);
        data.put("mealPlan", mealplan);

        // Store the meal plan in Firestore
        db.collection("mealPlans").add(data)
                .addOnSuccessListener(documentReference -> {
                    // Get the autogenerated document ID
                    String documentId = documentReference.getId();

                    // Update the meal plan with the document ID
                    mealplan.setMealPlanId(documentId);

                    // Update Firestore to include the mealPlanId in the document
                    db.collection("mealPlans").document(documentId)
                            .update("mealPlan.mealPlanId", documentId)
                            .addOnSuccessListener(aVoid -> Toast.makeText(context, "MealPlan added successfully!", Toast.LENGTH_LONG).show())
                            .addOnFailureListener(e -> Toast.makeText(context, "Error updating meal-plan ID: " + e.getMessage(), Toast.LENGTH_LONG).show());
                })
                .addOnFailureListener(e -> Toast.makeText(context, "Error adding meal-plan: " + e.getMessage(), Toast.LENGTH_LONG).show());
    }

    // Update a recipe
    public void updateRecipeById(Recipe recipe) {
        if (recipe.getRecipeId() != null) {
            recipesRef.document(recipe.getRecipeId())
                    .set(recipe) // Overwrites the entire document
                    .addOnSuccessListener(aVoid -> Toast.makeText(context, "Recipe updated successfully!", Toast.LENGTH_SHORT).show())
                    .addOnFailureListener(e -> Toast.makeText(context, "Error updating recipe: " + e.getMessage(), Toast.LENGTH_SHORT).show());
        } else {
            Toast.makeText(context, "Recipe ID is null. Cannot update.", Toast.LENGTH_SHORT).show();
        }
    }

    // Get a single recipe by ID
    public void getRecipe(String recipeId) {
        recipesRef.document(recipeId).get().addOnCompleteListener(task -> {
            if (task.isSuccessful() && task.getResult() != null) {
                Recipe recipe = task.getResult().toObject(Recipe.class);
                if (recipe != null) {
                    recipe.setRecipeId(task.getResult().getId());
                    Toast.makeText(context, "Recipe retrieved: " + recipe.getName(), Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(context, "Recipe not found.", Toast.LENGTH_SHORT).show();
                }
            } else {
                Toast.makeText(context, "Error retrieving recipe: " + task.getException(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    // Get real-time updates for all recipes
    public ListenerRegistration getAllRecipes(RecipeUpdateListener listener) {
        return recipesRef.addSnapshotListener((value, error) -> {
            if (error != null) {
                listener.onError(error);
                return;
            }

            if (value != null) {
                ArrayList<Recipe> recipes = new ArrayList<>();
                for (DocumentSnapshot doc : value.getDocuments()) {
                    Recipe recipe = doc.toObject(Recipe.class);
                    if (recipe != null) {
                        recipe.setRecipeId(doc.getId()); // Set document ID as recipe ID
                        recipes.add(recipe);
                    }
                }
                Log.v("size", String.valueOf(recipes.size()));
                listener.onRecipesUpdated(recipes);
            }
        });
    }

    // Fetch real-time user recipes from Firestore
    public ListenerRegistration getAllUserRecipes(String userId, UserRecipeUpdateListener listener) {
        // Reference to the userRecipes collection, filtering by userId
        return db.collection("userRecipes")
                .whereEqualTo("userId", userId)
                .addSnapshotListener((value, error) -> {
                    if (error != null) {
                        listener.onError(error); // Handle errors
                        return;
                    }

                    if (value != null) {
                        ArrayList<Recipe> recipes = new ArrayList<>();
                        for (DocumentSnapshot doc : value.getDocuments()) {
                            // Extract the Recipe object from Firestore
                            Recipe recipe = doc.get("recipe", Recipe.class);
                            if (recipe != null) {
                                recipe.setRecipeId(doc.getId()); // Set document ID as recipe ID
                                recipes.add(recipe);
                            }
                        }
                        listener.onUserRecipesUpdated(recipes); // Notify listener with the updated recipes
                    }
                });
    }

    public ListenerRegistration getAllMealPlanRecipes(String userId, MealPlanRecipeUpdateListener listener) {
        // Reference to the userRecipes collection, filtering by userId
        return db.collection("mealPlans")
                .whereEqualTo("userId", userId)
                .addSnapshotListener((value, error) -> {
                    if (error != null) {
                        listener.onError(error); // Handle errors
                        return;
                    }

                    if (value != null) {
                        ArrayList<Recipe> recipes = new ArrayList<>();
                        for (DocumentSnapshot doc : value.getDocuments()) {
                            // Extract the Recipe object from Firestore
                            MealPlan mealPlan = doc.get("mealPlan", MealPlan.class);
                            if (mealPlan != null && mealPlan.getRecipe() != null) {
                                recipes.add(mealPlan.getRecipe());
                            }
                        }
//                        Log.e("size", String.valueOf(recipes.size()));
                        listener.onMealPlanRecipesUpdated(recipes); // Notify listener with the updated recipes
                    }
                });
    }

    public ListenerRegistration getAllMealPlan(String userId, MealPlanUpdateListener listener) {
        // Reference to the userRecipes collection, filtering by userId
        return db.collection("mealPlans")
                .whereEqualTo("userId", userId)
                .addSnapshotListener((value, error) -> {
                    if (error != null) {
                        listener.onError(error); // Handle errors
                        return;
                    }

                    if (value != null) {
                        ArrayList<MealPlan> mealplans = new ArrayList<>();
                        for (DocumentSnapshot doc : value.getDocuments()) {
                            // Extract the Recipe object from Firestore
                            MealPlan mealPlan = doc.get("mealPlan", MealPlan.class);
                            mealplans.add(mealPlan);
                        }
//                        Log.e("size", String.valueOf(recipes.size()));
                        listener.onMealPlanUpdated(mealplans); // Notify listener with the updated recipes
                    }
                });
    }

    public ListenerRegistration getAllIngredient(String userId, GroceryListUpdateListener listener) {
        // Reference to the userRecipes collection, filtering by userId
        return db.collection("mealPlans")
                .whereEqualTo("userId", userId)
                .addSnapshotListener((value, error) -> {
                    if (error != null) {
                        listener.onError(error); // Handle errors
                        return;
                    }

                    if (value != null) {
                        ArrayList<String> ingredients = new ArrayList<>();
                        for (DocumentSnapshot doc : value.getDocuments()) {
                            // Extract the Recipe object from Firestore
                            MealPlan mealPlan = doc.get("mealPlan", MealPlan.class);
                            if (mealPlan != null && mealPlan.getRecipe() != null) {
                                // Get ingredients from the recipe object
                                ArrayList<String> ingredient = mealPlan.getRecipe().getIngredients();
                                if (ingredient != null) {
                                    for(String item: ingredient){
                                        ingredients.add(item);
                                    }
                                }
                            }
                        }
//                        Log.e("size", String.valueOf(ingredients.size()));
                        listener.onGroceryListUpdated(ingredients); // Notify listener with the updated recipes
                    }
                });
    }

    // Delete a recipe
    public void deleteRecipe(String recipeId) {
        recipesRef.document(recipeId).delete().addOnCompleteListener(task -> {
            if (task.isSuccessful()) {
                Toast.makeText(context, "Recipe deleted successfully!", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(context, "Error deleting recipe: " + task.getException(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    // Delete a recipe from Firestore under userRecipes collection
    public void deleteUserRecipe(String recipeId) {
        db.collection("userRecipes").document(recipeId).delete()
                .addOnSuccessListener(aVoid -> {
                    Toast.makeText(context, "Recipe deleted successfully!", Toast.LENGTH_SHORT).show();
                })
                .addOnFailureListener(e -> {
                    Toast.makeText(context, "Error deleting recipe: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                });
    }

    // Custom listener for real-time updates
    public interface RecipeUpdateListener {
        void onRecipesUpdated(ArrayList<Recipe> recipes);
        void onError(Exception e);
    }

    public interface UserRecipeUpdateListener {
        void onError(FirebaseFirestoreException error);

        void onUserRecipesUpdated(ArrayList<Recipe> recipes);
    }

    public interface MealPlanRecipeUpdateListener {
        void onError(FirebaseFirestoreException error);

        void onMealPlanRecipesUpdated(ArrayList<Recipe> recipes);
    }

    public interface MealPlanUpdateListener {
        void onError(FirebaseFirestoreException error);

        void onMealPlanUpdated(ArrayList<MealPlan> mealPlans);
    }


    public interface GroceryListUpdateListener {
        void onGroceryListUpdated(ArrayList<String> groceryList);
        void onError(Exception e);
    }
}
